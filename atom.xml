<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李一鸣专属网站</title>
  
  
  <link href="http://nayo414.github.io/atom.xml" rel="self"/>
  
  <link href="http://nayo414.github.io/"/>
  <updated>2022-02-18T08:56:39.380Z</updated>
  <id>http://nayo414.github.io/</id>
  
  <author>
    <name>李一鸣</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么不能使用BigDecimal的equals方法做等值比较</title>
    <link href="http://nayo414.github.io/2022/02/18/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8BigDecimal%E7%9A%84equals%E6%96%B9%E6%B3%95%E5%81%9A%E7%AD%89%E5%80%BC%E6%AF%94%E8%BE%83/"/>
    <id>http://nayo414.github.io/2022/02/18/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8BigDecimal%E7%9A%84equals%E6%96%B9%E6%B3%95%E5%81%9A%E7%AD%89%E5%80%BC%E6%AF%94%E8%BE%83/</id>
    <published>2022-02-18T07:09:16.000Z</published>
    <updated>2022-02-18T08:56:39.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><em><strong>前言</strong></em></h1><p>BigDecimal 是 java.math 包中提供的一种可以用来进行精确运算的类型。所以，在支付、电商等业务中，BigDecimal 的使用非常频繁。而且其内部自带了很多方法，如加，减，乘，除等运算方法都是可以直接调用的。除了需要用 BigDecimal 表示数字和进行数字运算以外，代码中还经常需要对于数字进行相等判断。</p><h1 id="BigDecimal-做等值比较"><a href="#BigDecimal-做等值比较" class="headerlink" title="BigDecimal 做等值比较"></a><em><strong>BigDecimal 做等值比较</strong></em></h1><p><img src="https://nayo414.github.io/img/BigDecimal.png"><br>那么为什么会有这样的要求呢🤔~ 其中的奥秘是什么呢🤔~ 请各位小伙伴听我娓娓道来…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal bigDecimal1 = <span class="keyword">new</span> BigDecimal(<span class="number">1</span>);</span><br><span class="line">    BigDecimal bigDecimal2 = <span class="keyword">new</span> BigDecimal(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bigDecimal1 == bigDecimal2)&#123;</span><br><span class="line">        <span class="comment">//等值比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信聪明的小伙伴一眼就可以看出来上面的代码是有问题的，因为 BigDecimal 是对象，不能使用 == 来做等值判断。</p><p>如果我们使用 BigDecimal 的 equals 方法做等值比较是不是可以呢？👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    BigDecimal bigDecimal1 = <span class="keyword">new</span> BigDecimal(<span class="number">1</span>);</span><br><span class="line">    BigDecimal bigDecimal2 = <span class="keyword">new</span> BigDecimal(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bigDecimal1.equals(bigDecimal2))&#123;</span><br><span class="line">        <span class="comment">//等值比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我先卖个关子，咱们跑跑代码来看看能不能用 BigDecimal 的 equals 方法做等值比较(●’◡’●)，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    BigDecimal bigDecimal1 = <span class="keyword">new</span> BigDecimal(<span class="number">1</span>);</span><br><span class="line">    BigDecimal bigDecimal2 = <span class="keyword">new</span> BigDecimal(<span class="number">1</span>);</span><br><span class="line">    System.out.println(bigDecimal1.equals(bigDecimal2));</span><br><span class="line"></span><br><span class="line">    BigDecimal bigDecimal3 = <span class="keyword">new</span> BigDecimal(<span class="number">1</span>);</span><br><span class="line">    BigDecimal bigDecimal4 = <span class="keyword">new</span> BigDecimal(<span class="number">1.0</span>);</span><br><span class="line">    System.out.println(bigDecimal3.equals(bigDecimal4));</span><br><span class="line"></span><br><span class="line">    BigDecimal bigDecimal5 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    BigDecimal bigDecimal6 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line">    System.out.println(bigDecimal5.equals(bigDecimal6));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://nayo414.github.io/img/BigDecimal1.png"><br>我们可以发现，在使用 BigDecimal 的 equals 方法对 1 和 1.0 进行比较的时候：使用 int、double 定义 BigDecimal 结果是 true；使用 String 定义 BigDecimal 结果是false，为什么会出现这种情况呢？</p><p>我们一起来看看 equals 方法的源码 👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Compares this &#123;<span class="doctag">@code</span> BigDecimal&#125; with the specified</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> Object&#125; for equality.  Unlike &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">    * #compareTo(BigDecimal) compareTo&#125;, this method considers two</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> BigDecimal&#125; objects equal only if they are equal in</span></span><br><span class="line"><span class="comment">    * value and scale (thus 2.0 is not equal to 2.00 when compared by</span></span><br><span class="line"><span class="comment">    * this method).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  x &#123;<span class="doctag">@code</span> Object&#125; to which this &#123;<span class="doctag">@code</span> BigDecimal&#125; is</span></span><br><span class="line"><span class="comment">    *         to be compared.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if and only if the specified &#123;<span class="doctag">@code</span> Object&#125; is a</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> BigDecimal&#125; whose value and scale are equal to this</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> BigDecimal&#125;&#x27;s.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span>    #compareTo(java.math.BigDecimal)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span>    #hashCode</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!(x <span class="keyword">instanceof</span> BigDecimal))</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       BigDecimal xDec = (BigDecimal) x;</span><br><span class="line">       <span class="keyword">if</span> (x == <span class="keyword">this</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">if</span> (scale != xDec.scale)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">long</span> s = <span class="keyword">this</span>.intCompact;</span><br><span class="line">       <span class="keyword">long</span> xs = xDec.intCompact;</span><br><span class="line">       <span class="keyword">if</span> (s != INFLATED) &#123;</span><br><span class="line">           <span class="keyword">if</span> (xs == INFLATED)</span><br><span class="line">               xs = compactValFor(xDec.intVal);</span><br><span class="line">           <span class="keyword">return</span> xs == s;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xs != INFLATED)</span><br><span class="line">           <span class="keyword">return</span> xs == compactValFor(<span class="keyword">this</span>.intVal);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.inflated().equals(xDec.inflated());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其实咱们从方法的注释中就能找到答案：__equals 方法会比较两部分内容，分别是值（value）和标度（scale）__，也就是说 bigDecimal5 和 bigDecimal6 的值虽然相同，但是标度是不一样的。</p><p>咱们打个断点，debug 一下看看~<br><img src="https://nayo414.github.io/img/BigDecimal2.png"><br>我们可以看见 bigDecimal5 的标度值是0，而bigDecimal6的标度值是1，所以 bigDecimal5 和 bigDecimal6 的比较结果是false (●ˇ∀ˇ●)</p><p>那么这时候又产生了一个疑问：为什么标度不同呢？🤔</p><p>嘻嘻~ 各位小伙伴稍安勿躁，请听我娓娓道来~</p><p>BigDecimal 一共有以下 4 个构造方法：</p><ul><li>BigDecimal(int)</li><li>BigDecimal(double)</li><li>BigDecimal(long)</li><li>BigDecimal(String)</li></ul><p>其中最容易理解的就是 BigDecimal(int) 和 BigDecimal(long)，因为是整数，所以标度就是 0 （源码如下👇）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Translates an &#123;<span class="doctag">@code</span> int&#125; into a &#123;<span class="doctag">@code</span> BigDecimal&#125;.  The</span></span><br><span class="line"><span class="comment">    * scale of the &#123;<span class="doctag">@code</span> BigDecimal&#125; is zero.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> val &#123;<span class="doctag">@code</span> int&#125; value to be converted to</span></span><br><span class="line"><span class="comment">    *            &#123;<span class="doctag">@code</span> BigDecimal&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span>  1.5</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.intCompact = val;</span><br><span class="line">       <span class="keyword">this</span>.scale = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">this</span>.intVal = <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Translates a &#123;<span class="doctag">@code</span> long&#125; into a &#123;<span class="doctag">@code</span> BigDecimal&#125;.  The</span></span><br><span class="line"><span class="comment">    * scale of the &#123;<span class="doctag">@code</span> BigDecimal&#125; is zero.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> val &#123;<span class="doctag">@code</span> long&#125; value to be converted to &#123;<span class="doctag">@code</span> BigDecimal&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span>  1.5</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(<span class="keyword">long</span> val)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.intCompact = val;</span><br><span class="line">       <span class="keyword">this</span>.intVal = (val == INFLATED) ? INFLATED_BIGINT : <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">this</span>.scale = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>而对于 BigDecimal (double) 来说，当我们使用 new BigDecimal (0.1) 创建一个对象的时候，其实创建出来的对象的值并不是等于0.1，而是等于0.1000000000000000055511151231257827021181583404541015625<br><img src="https://nayo414.github.io/img/BigDecimal3.png"></p><p>我们再打个断点，debug一下看看标度值是多少</p><p><img src="https://nayo414.github.io/img/BigDecimal4.png"><br>我们可以看到标度值是55，这个值是怎么来的呢？其实很简单，这个标度值就是这个数字的位数，其他的浮点数也同样的道理。对于 new BigDecimal (1.0)，和new BigDecimal (1.00) 这样的形式来说，因为他本质上也是个整数，所以他创建出来的数字的标度就是0。</p><p>最后我们再看看 BigDecimal(String) ，当我们使用 new BigDecimal (“0.1”) 创建一个 BigDecimal 的时候，其实创建出来的值正好就是等于 0.1 的。那么他的标度也就是 1；如果使用 new BigDecimal (“0.10000”)，那么创建出来的数就是 0.10000，标度也就是 5。</p><p>讲到这里相信各位小伙伴也明白了为什么 bigDecimal5 和 bigDecimal6 用equals 方法做等值比较的结果是false了 O(∩_∩)O</p><p>如果我们只想判断两个 BigDecimal 的值是否相等，那么该如何判断呢？</p><p>在 BigDecimal 中也为我们提供了一个方法 —— compareTo 方法，这个方法就可以只比较两个数字的值，如果两个数相等，则返回 0。<br><img src="https://nayo414.github.io/img/BigDecimal5.png"><br>我们把 equals 换成 compareTo 后可以发现，bigDecimal5 和 bigDecimal6 等值比较的结果是0，也就是说明这二者的值是相等的。</p><p><strong>P.S. 所以我们在做等值比较的时候不要随便用 BigDecimal 的 equals 方法，如果只是要对数值作比较，就果断选择 compareTo 方法就搞定拉~</strong></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a><em><strong>小结</strong></em></h1><p>本人经验有限，有些地方可能讲的没有特别到位，如果您在阅读的时候想到了什么问题，欢迎在评论区留言，我们后续再一一探讨🙇‍</p><p>如果本文对你有帮助的话，请不要吝啬你的赞，谢谢！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;BigDecimal 是 java.math 包中提供的一种可以用来进行精确运算的类型。</summary>
      
    
    
    
    
    <category term="Java" scheme="http://nayo414.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>摸鱼网站</title>
    <link href="http://nayo414.github.io/2022/02/09/%E6%91%B8%E9%B1%BC%E7%BD%91%E7%AB%99/"/>
    <id>http://nayo414.github.io/2022/02/09/%E6%91%B8%E9%B1%BC%E7%BD%91%E7%AB%99/</id>
    <published>2022-02-09T07:42:58.000Z</published>
    <updated>2022-02-18T07:21:36.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="李一鸣的摸鱼小网站"><a href="#李一鸣的摸鱼小网站" class="headerlink" title="李一鸣的摸鱼小网站"></a>李一鸣的摸鱼小网站</h2><ul><li><a href="https://www.bilibili.com/">B站</a></li><li><a href="http://www.mazegenerator.net/">随机迷宫</a></li><li><a href="http://slither.io/">贪吃蛇大作战</a></li><li><a href="https://flipanim.com/">Flip-Anim制作动画</a></li><li><a href="https://zty.pe/">消灭单词大作战</a></li><li><a href="https://aidn.jp/mikutap/">米库塔普</a></li><li><a href="https://lmbtfy.cn/">需要我帮你Baidu吗？</a></li><li><a href="https://zzkia.noddl.me/">诺基亚图片生成器</a></li><li><a href="https://findtheinvisiblecow.com/">隐藏的动物-注意音量大小哦~</a></li><li><a href="http://g.vsane.com/game/795/">折磨小游戏-召唤神龙</a></li><li><a href="http://chishenme.xyz/">中午吃啥子？ 罗非鱼~</a></li><li><a href="https://www.webhek.com/post/draw-a-stickman.html">画个小人动起来</a></li><li><a href="http://g.vsane.com/game/101/">摆成十-简单益智小游戏</a></li><li><a href="http://g.vsane.com/game/820/">收集蜂蜜-蜂蜜味就像我每天一想到你，就很甜</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;李一鸣的摸鱼小网站&quot;&gt;&lt;a href=&quot;#李一鸣的摸鱼小网站&quot; class=&quot;headerlink&quot; title=&quot;李一鸣的摸鱼小网站&quot;&gt;&lt;/a&gt;李一鸣的摸鱼小网站&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/&quot;&gt;</summary>
      
    
    
    
    
    <category term="她" scheme="http://nayo414.github.io/tags/%E5%A5%B9/"/>
    
  </entry>
  
</feed>
